name: Build

on:
  push:
    branches:
      - 'main'
    tags:
      - "v*.*.*"
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  latest_tag: latest

jobs:
  test:
    runs-on: ubuntu-24.04

    services:
      ollama:
        image: alpine/ollama
        ports:
          - 11434:11434

    env:
      OLLAMA_HOST: localhost:11434

    strategy:
      matrix:
        python-version: [ "3.12" ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install Ollama
        run: |
          curl -fsSL https://ollama.com/install.sh | sh

      - name: Pull llama3.2:3b
        run: |
          ollama pull llama3.2:3b

      - name: Lint with Ruff
        run: |
          pip install ruff
          ruff check --output-format=github .
        continue-on-error: true

      - name: test
        run: |
          pip install -r requirements.txt
          pip install -r dev_requirements.txt
          RESULT_DIR="test-results/${{ matrix.python-version }}"
          mkdir -p "${RESULT_DIR}"
          PYTHONPATH=$(pwd) pytest tests --junitxml=${RESULT_DIR}/test-results.xml --cov=shyhurricane --cov-branch --cov-report=xml:${RESULT_DIR}/coverage.xml --cov-report=html:${RESULT_DIR}/htmlcov --cov-report=term-missing

      - name: Upload pytest test results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: |
            test-results/${{ matrix.python-version }}
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

  mcp-image:
    runs-on: ubuntu-24.04
    needs: [ test ]
    permissions:
      contents: read
      packages: write

    env:
      IMAGE_NAME: ${{ github.repository }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          annotations: ${{ steps.meta.outputs.annotations }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=image,oci-mediatypes=true,compression=zstd,compression-level=3,force-compression=true


  unix-command-image:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write

    env:
      IMAGE_NAME: ${{ github.repository }}_unix_command

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: src/docker/unix_command
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          annotations: ${{ steps.meta.outputs.annotations }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=image,oci-mediatypes=true,compression=zstd,compression-level=3,force-compression=true
